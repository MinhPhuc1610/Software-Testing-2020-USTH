Ex1-1
\section{Exercise 1-1}
    \large\textbf{Some factor are:}
    \item 1) Good connection between testers and developers
    \item 2) Leadership with skill to manage the project and 
             lead the team 
    \item 3) People with experience and skill in the field
    \item 4) Good teamwork and communication 

    \section{Exercise 1-3}
    \large\textbf{Every program or project have some level of risk which is the cost of correction.
    There always will be bug or flaw in the program that need correction. The later we found them, the higher its cost. 
    The risk can never be reduced to zero since it is impossible for a program without a need of upgrade or correct. 
    So as long the program is still in development or maintenance, there will always be risk. }
    
    \section {Exercise 1-4}
    \item a) The set represented by v1 to be a representation of the set and the set union of the elements from the sets represented by v1 and v2 . i.e., that contains all the elements that appear in either the set represented by v1 or the set represented by v2.
java code:
import java.util.Set;
public class Main
{
public static Set union(Set setA, Set setB)
{
Set tmp = new TreeSet(setA);
tmp.addAll(setB);
return tmp;
}
public static boolean isSubset(Set setA, Set setB)
{
return setB.containsAll(setA);
}
public static boolean isSuperset(Set setA, Set setB)
{
return setA.containsAll(setB);
}
public static void main(String args[])
{
TreeSet<Character> set1 = new TreeSet<Character>();
TreeSet<Character> set2 = new TreeSet<Character>();
set1.add('A');
set1.add('B');
System.out.println("set1: " + set1);
System.out.println("set2: " + set2);
System.out.println("Union: " + union(set1, set2));
}
}
\section {Exercise 1-5}
    \item Program 1:
    \item a) The for-loop should be greater or equal than 0
    \item b) Input : x=null; y=2
    \item c) For every input where y is in the second position, there will be no error.Example: x=[2 4 1]; y=3;
    \item d) For the input that no element in x = y, the program still print -1 but the error where its missing path is still there
    \item e) The error state: x=[2 3 5], y=2, i=0 return -1
    \item f) Change greater to greater or equal than 0.
    \item Program 2:
    \item a) The loop should start from the highest element and decrease.
    \item b) NO possible input
    \item c) Every input where there is no loop happen. Example : x = [9]
    \item d) x=[1 0 2]
    \item e) First state of error: x=[0 1 0] i=0 result return in  0
    \item f) Same as part a)
    \item Program 3:
    \item a) The condition should be greater than 0 not greater or equal.
    \item b)Unless the array is empty otherwise the fault will be executed.
    \item c)Every arrays that does not have 0
    \item d) Every output that include 0 as a positive integer will also result in the failure of the program.
    \item e) The error state: x=[-4 2 0 2] i=2 count = 2
    \item f) Same as part a)
    \item Program 4
    \item a) If there is a negative odd number, it will not be count so add another condition where the remainder of x[i] divide by 2 equal -1.
    \item b) The fault will be executed as long as the x array is not empty
    \item c) Every array with input are all positive
    \item d) Any input with error also result in the failure since the program can not count the negative number as an odd number.
    \item e) Error state: x=[-3 -2 0 1 4], count = 0, i=0
    \item f) Same as a)
\end{document}
